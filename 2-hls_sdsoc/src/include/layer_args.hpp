// Small class used to keep layer arguments

#ifndef LARGS_HPP
#define LARGS_HPP

// Constant definition
#define SQN_FMAP_MAX_SZ 817216 // FMAP MAX SIZE
#define SQN_IMG_SZ 227*227*3
#define SQN_LN 29            // LAYER NUMBER

#define ZQN_FMAP_MAX_SZ 1048576 // FMAP MAX SIZE
#define ZQN_IMG_SZ 256*256*3
#define ZQN_LN 31            // LAYER NUMBER

class Largs_sqn{

	public:
		std::string layer_name[1+SQN_LN+18];
		std::string layer_name_hw[1+SQN_LN+13];
		uint8_t h_in[SQN_LN];
		uint8_t w_in[SQN_LN];
		uint16_t ch_in[SQN_LN];
		uint16_t ch_out[SQN_LN];
		uint8_t pad[SQN_LN];
		uint8_t kernel[SQN_LN];
		uint8_t stride[SQN_LN];
		uint8_t ppad[SQN_LN];
		uint8_t pkernel[SQN_LN];
		uint8_t pstride[SQN_LN];

	Largs_sqn() :

		layer_name {"RSHP", "C1", "MP1", "F2S", "F2E1", "F2E3", "M2", "F3S", "F3E1", "MP3_1", "F3E3", "MP3_3", "M3", "F4S", "F4E1", "F4E3", "M4", "F5S", "F5E1", "MP5_1", "F5E3", "MP5_3", "M5", "F6S", "F6E1", "F6E3", "M6", "F7S", "F7E1", "F7E3", "M7", "F8S", "F8E1", "F8E3", "M8", "F9S", "F9E1", "F9E3", "M9", "C10_1", "C10_2", "M10_1-2", "C10_3", "C10_4", "M10_3-4", "M10", "AVGP", "SMAX"},
		layer_name_hw {"RSHP", "C1_MP1", "F2S", "F2E1", "F2E3", "M2", "F3S", "F3E1_MP3", "F3E3_MP3", "M3", "F4S", "F4E1", "F4E3", "M4", "F5S", "F5E1_MP5", "F5E3_MP5", "M5", "F6S", "F6E1", "F6E3", "M6", "F7S", "F7E1", "F7E3", "M7", "F8S", "F8E1", "F8E3", "M8", "F9S", "F9E1", "F9E3", "M9", "C10_1", "C10_2", "M10_1-2", "C10_3", "C10_4", "M10_3-4", "M10", "AVGP", "SMAX"},

		// Layer   C1_   F2S, F2E1, F2E3,   F3S, F3E1_ F3E3_   F4S, F4E1, F4E3,   F5S, F5E1_ F5E3_   F6S, F6E1, F6E3,   F7S, F7E1, F7E3,    F8S, F8E1, F8E3,    F9S, F9E1, F9E3,   C10_1, C10_2, C10_3, C10_4
		//        MP1,                            MP3,  MP3,                            MP5,  MP5,                                                                  
			h_in {113,    56,   56,   56,    56,   56,   56,    28,   28,   28,    28,   28,   28,    14,   14,   14,    14,   14,   14,     14,   14,   14,     14,   14,   14,      14,    14,    14,    14},
			w_in {113,    56,   56,   56,    56,   56,   56,    28,   28,   28,    28,   28,   28,    14,   14,   14,    14,   14,   14,     14,   14,   14,     14,   14,   14,      14,    14,    14,    14},
		   ch_in { 32,    64,   16,   16,   128,   16,   16,   128,   32,   32,   256,   32,   32,   256,   48,   48,   384,   48,   48,    384,   64,   64,    512,   64,   64,     512,   512,   512,   512},
		  ch_out { 64,    16,   64,   64,    16,   64,   64,    32,  128,  128,    32,  128,  128,    48,  192,  192,    48,  192,  192,     64,  256,  256,     64,  256,  256,     256,   256,   256,   256},
			 pad {  0,     0,    0,    1,     0,    0,    1,     0,    0,    1,     0,    0,    1,     0,    0,    1,     0,    0,    1,      0,    0,    1,      0,    0,    1,       0,     0,     0,     0},
		  kernel {  1,     1,    1,    3,     1,    1,    3,     1,    1,    3,     1,    1,    3,     1,    1,    3,     1,    1,    3,      1,    1,    3,      1,    1,    3,       1,     1,     1,     1},
		  stride {  1,     1,    1,    1,     1,    1,    1,     1,    1,    1,     1,    1,    1,     1,    1,    1,     1,    1,    1,      1,    1,    1,      1,    1,    1,       1,     1,     1,     1},
			ppad {  0,     0,    0,    0,     0,    1,    1,     0,    0,    0,     0,    1,    1,     0,    0,    0,     0,    0,    0,      0,    0,    0,      0,    0,    0,       0,     0,     0,     0},
		 pkernel {  3,     1,    1,    1,     1,    3,    3,     1,    1,    1,     1,    3,    3,     1,    1,    1,     1,    1,    1,      1,    1,    1,      1,    1,    1,       1,     1,     1,     1},
		 pstride {  2,     1,    1,    1,     1,    2,    2,     1,    1,    1,     1,    2,    2,     1,    1,    1,     1,    1,    1,      1,    1,    1,      1,    1,    1,       1,     1,     1,     1}
	{ }

};


class Largs_zqn{

	public:
		std::string layer_name[1+ZQN_LN+15];
		uint8_t h_in[ZQN_LN];
		uint8_t w_in[ZQN_LN];
		uint16_t ch_in[ZQN_LN];
		uint16_t ch_out[ZQN_LN];
		uint8_t pad[ZQN_LN];
		uint8_t kernel[ZQN_LN];
		uint8_t stride[ZQN_LN];
		uint8_t ppad[ZQN_LN];
		uint8_t pkernel[ZQN_LN];
		uint8_t pstride[ZQN_LN];

	Largs_zqn() :

		layer_name {"RSHP", "C1", "F2S3", "F2E1", "F2E3", "M2", "F3S1", "F3E1", "F3E3", "M3", "F4S3", "F4E1", "F4E3", "M4", "F5S1", "F5E1", "F5E3", "M5", "F6S3", "F6E1", "F6E3", "M6", "F7S1", "F7E1", "F7E3", "M7", "F8S3_1", "F8S3_2", "M8S", "F8E1", "F8E3", "M8", "F9S1", "F9E1", "F9E3_1", "F9E3_2", "M9E", "M9", "C10_11", "C10_12", "M10_1", "C10_21", "C10_22", "M10_2", "M10", "AVGP", "SMAX"},

		// Layer   C1,  F2S3, F2E1, F2E3,  F3S1, F3E1, F3E3,  F4S3, F4E1, F4E3,  F5S1, F5E1, F5E3,  F6S3, F6E1, F6E3,  F7S1, F7E1, F7E3,   F8S3_1, F8S3_2, F8E1, F8E3,   F9S1, F9E1, F9E3_1, F9E3_2,   C10_11, C10_12, C10_21, C10_22
			h_in {128,   128,   64,   64,    64,   64,   64,    64,   32,   32,    32,   32,   32,    32,   16,   16,    16,   16,   16,       16,     16,    8,    8,      8,    8,      8,      8,        8,      8,      8,      8},
			w_in {128,   128,   64,   64,    64,   64,   64,    64,   32,   32,    32,   32,   32,    32,   16,   16,    16,   16,   16,       16,     16,    8,    8,      8,    8,      8,      8,        8,      8,      8,      8},
		   ch_in { 32,    64,   16,   16,   128,   16,   16,   128,   32,   32,   256,   32,   32,   256,   64,   64,   512,   64,   64,      384,    384,  112,  112,    512,  112,    112,    112,      736,    736,    736,    736},
		  ch_out { 64,    16,   64,   64,    16,   64,   64,    32,  128,  128,    32,  128,  128,    64,  256,  256,    64,  192,  192,       64,     48,  256,  256,    112,  368,    256,    112,      256,    256,    256,    256},
			 pad {  0,     1,    0,    1,     0,    0,    1,     1,    0,    1,     0,    0,    1,     1,    0,    1,     0,    0,    1,        1,      1,    0,    1,      0,    0,      1,      1,        0,      0,      0,      0},
		  kernel {  1,     3,    1,    3,     1,    1,    3,     3,    1,    3,     1,    1,    3,     3,    1,    3,     1,    1,    3,        3,      3,    1,    3,      1,    1,      3,      3,        1,      1,      1,      1},
		  stride {  1,     2,    1,    1,     1,    1,    1,     2,    1,    1,     1,    1,    1,     2,    1,    1,     1,    1,    1,        2,      2,    1,    1,      1,    1,      1,      1,        1,      1,      1,      1},
			ppad {  0,     0,    0,    0,     0,    0,    0,     0,    0,    0,     0,    0,    0,     0,    0,    0,     0,    0,    0,        0,      0,    0,    0,      0,    0,      0,      0,        0,      0,      0,      0},
		 pkernel {  1,     1,    1,    1,     1,    1,    1,     1,    1,    1,     1,    1,    1,     1,    1,    1,     1,    1,    1,        1,      1,    1,    1,      1,    1,      1,      1,        1,      1,      1,      1},
		 pstride {  1,     1,    1,    1,     1,    1,    1,     1,    1,    1,     1,    1,    1,     1,    1,    1,     1,    1,    1,        1,      1,    1,    1,      1,    1,      1,      1,        1,      1,      1,      1}
	{ }

};

#endif
